import pygame
import time
import numpy as np
from multiprocessing import Pool

width, height = 800, 800
zoom = 0.3
xAxis = 1 / zoom
yAxis = height / (width * zoom)
camX = -0.5
camY = 0
iterations = 100
lim = 4

# zoom 300, camX -0.5, camY 0.61
# Linear = int(255 * m) % 255
# Sinusoidal = int(255 * (-math.cos(math.pi * m) + 1) / 2) % 255
# Square = int(255 * (m * m + 1)) % 255

t1 = time.perf_counter()

xOffset = (-xAxis / 2) + camX
yOffset = (-yAxis / 2) - camY
ratio = xAxis / width


def frac(x, y):
    a = (x * ratio) + xOffset
    b = (y * ratio) + yOffset
    ca = a
    cb = b
    n = 0
    while a * a + b * b < lim and n < iterations:
        ai = a * a - b * b
        bi = 2 * a * b

        a = ai + ca
        b = bi + cb
        n += 1
    m = n / iterations

    lin = int(255 * m) % 255
    r = lin
    g = lin
    b = lin
    return r, g, b


if __name__ == '__main__':

    win = (width, height)
    screen = pygame.display.set_mode(win)
    pix = []
    for x in range(width):
        for y in range(height):
            pix.append((x, y))

    p = Pool()
    pixels = p.starmap(frac, pix)
    p.close()
    p.join()
    array = np.asarray(pixels)
    reshaped_array = array.reshape(height, width, 3)

    surface = pygame.surfarray.array3d(screen)
    pygame.surfarray.blit_array(screen, reshaped_array)

    pygame.display.update()

    t2 = time.perf_counter()
    print(t2 - t1)

    run = True
    while run:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
        keys = pygame.key.get_pressed()
